{"version":3,"file":"static/js/866.6bf4998d.chunk.js","mappings":"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","sources":["components/ListLine.js","AddLine.js"],"sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Table, Pagination } from \"react-bootstrap\";\r\nimport { BiEditAlt } from \"react-icons/bi\"\r\nimport { useTranslation } from \"react-i18next\";\r\nconst ListLine = ({ linenames, updateMode }) => {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const { t, i18n } = useTranslation();\r\n  const recordsPerPage = 10;\r\n  const lastIndex = currentPage * recordsPerPage;\r\n  const firstIndex = lastIndex - recordsPerPage;\r\n  const records = linenames.slice(firstIndex, lastIndex);\r\n  const nPage = Math.ceil(Object.keys(linenames).length / recordsPerPage);\r\n  const numbers = [...Array(nPage + 1).keys()].slice(1);\r\n  var serialno = 0;\r\n\r\n  serialno = (currentPage - 1) * recordsPerPage;\r\n  /*const removeLineMan=(id)=>{\r\n      axios.delete(`${baseURL}/linemancreate/delete/${id}`).then((res)=>{\r\n          setUpdateUI((preveState)=>!preveState)\r\n        })\r\n  }*/\r\n  function prevPage() {\r\n    if (currentPage !== firstIndex) {\r\n      setCurrentPage(currentPage - 1)\r\n    }\r\n\r\n  }\r\n  function nextPage() {\r\n    if (currentPage !== lastIndex) {\r\n      serialno = lastIndex;\r\n      setCurrentPage(currentPage + 1);\r\n    }\r\n\r\n  }\r\n  function changeCPage(id) {\r\n    setCurrentPage(id)\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <div style={{ margin: \"5rem\" }}>\r\n        <Table striped bordered hover size=\"sm\"  >\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                {t('no')}\r\n              </th>\r\n              <th>\r\n                {t('line')}\r\n              </th>\r\n              <th>\r\n                {t('lineno')}\r\n              </th>\r\n              <th>\r\n                {t('tableaction')}\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n              records && records.length > 0\r\n                ?\r\n                (records.map((linename) => {\r\n                  serialno = serialno + 1;\r\n                  return (\r\n                    <tr>\r\n                      <td>{serialno}</td>\r\n                      <td>{linename.linename}</td>\r\n                      <td>{linename.lineno}</td>\r\n                      <td>\r\n                        <BiEditAlt className='icons' onClick={() => updateMode(linename._id, linename.linename, linename.lineno)} />\r\n                        {/*<BsTrash className='icons' onClick={()=>removeLineMan(linemanname._id)} />*/}\r\n                      </td>\r\n                    </tr>\r\n\r\n                  )\r\n                })\r\n                )\r\n                :\r\n                t('tabledata')\r\n            }\r\n          </tbody>\r\n        </Table>\r\n        <nav>\r\n\r\n          <Pagination>\r\n            <Pagination.Prev >\r\n              <a href=\"#\" className='page-link' onClick={prevPage}>{t('pageprev')}</a>\r\n            </Pagination.Prev>\r\n            {\r\n              numbers.map((n, i) => (\r\n                <Pagination.Item>\r\n                  <a href=\"#\" className='page-link'\r\n                    onClick={() => changeCPage(n)}>{n}</a>\r\n                </Pagination.Item>\r\n              ))\r\n            }\r\n            <Pagination.Next>\r\n              <a href=\"#\" className='page-link' onClick={nextPage}>{t('pagenext')}</a>\r\n            </Pagination.Next>\r\n          </Pagination>\r\n        </nav>\r\n\r\n      </div>\r\n    </Fragment>\r\n  )\r\n\r\n}\r\nexport default ListLine;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Container, Form, Row, Col } from 'react-bootstrap';\r\nimport ListLine from \"./components/ListLine\"\r\nimport axios from \"axios\"\r\nimport { baseURL } from \"./utils/constant\";\r\nimport PlaceHolder from \"./components/spinner/placeholder\";\r\nimport { useTranslation } from \"react-i18next\";\r\nfunction AddLine() {\r\n    const [input, setInput] = useState(\"\");\r\n    const [inputlineno, setInputLineno] = useState(\"\")\r\n    const [linenames, setLinenames] = useState([]);\r\n    const [updateUI, setUpdateUI] = useState(false);\r\n    const [updateId, setUpdateId] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const { t, i18n } = useTranslation();\r\n    const [validated, setValidated] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        axios.get(`${baseURL}/linemancreate/get/lines`).then((res) => {\r\n            setLinenames(res.data)\r\n            console.log(res.data);\r\n            setIsLoading(false)\r\n        })\r\n            .catch(error => {\r\n                console.log(\"error=\", error);\r\n                setErrorMessage(t('errormessageline'));\r\n                setIsLoading(false);\r\n            })\r\n    }, [updateUI]);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keydown\", function (event) {\r\n            if (event.key === \"Enter\" && event.target.nodeName === \"INPUT\") {\r\n                var form = event.target.form;\r\n                var index = Array.prototype.indexOf.call(form, event.target);\r\n                form.elements[index + 1].focus();\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n        }\r\n        setValidated(true);\r\n\r\n        if (input !== \"\" && inputlineno !== \"\") {\r\n            addLine();\r\n        }\r\n\r\n    };\r\n\r\n    const addLine = () => {\r\n        \r\n        setIsLoading(true);\r\n\r\n        axios.post(`${baseURL}/line/save`,{ linename: input, lineno: Number(inputlineno) }).then((res) => {\r\n            setIsLoading(false)\r\n            setInput(\"\")\r\n            setInputLineno(\"\");\r\n            setUpdateUI((prevState) => !prevState)\r\n            alert(t('savealertmessage'));\r\n        })\r\n            .catch(error => {\r\n                setErrorMessage(t('errormessagesaveline'));\r\n                setIsLoading(false);\r\n                console.log(\"error=\", error);\r\n            })\r\n        \r\n    }\r\n\r\n    const updateMode = (id, text, lineno) => {\r\n        setInput(text);\r\n        setInputLineno(lineno);\r\n        setUpdateId(id);\r\n    }\r\n\r\n    const updateLine = () => {\r\n        setIsLoading(true);\r\n        axios.put(`${baseURL}/line/update/${updateId}`, { linename: input, lineno: inputlineno }).then((res) => {\r\n            setIsLoading(false)\r\n            setUpdateUI((prevState) => !prevState)\r\n            setInput(\"\");\r\n            setInputLineno(\"\");\r\n            setUpdateId(null);\r\n        }).catch(error => {\r\n            setErrorMessage(t('errormessagesaveline'));\r\n            setIsLoading(false);\r\n            console.log(\"error=\", error);\r\n        })\r\n        alert(t('savealertmessage'));\r\n    }\r\n    const clearFields = () => {\r\n        setInput(\"\");\r\n        setInputLineno(\"\");\r\n        setUpdateId(null);\r\n    }\r\n\r\n    const renderLineList = (\r\n        <div className=\"text-center\">\r\n            <ListLine linenames={linenames} updateMode={updateMode} />\r\n        </div>);\r\n\r\n    return (\r\n\r\n        <Container >\r\n            <h2 className=\"text-center\">{t('lineheader')}</h2>\r\n            <Row className=\"justify-content-md-center mt-5 \">\r\n                <Col xs={6} lg={6} className=\"rounded bg-white\">\r\n                    <Form validated={validated}>\r\n                        <Row className=\"rounded bg-white\">\r\n                            <Col xs={12} md={12} >\r\n                                <Form.Group className=\"mb-3\" name=\"linename\" border=\"primary\" >\r\n                                    <Form.Label>{t('line')}</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder={t('linename')} required value={input} onChange={(e) => setInput(e.target.value)} autoFocus />\r\n                                </Form.Group>\r\n                            </Col>\r\n\r\n                        </Row>\r\n                        <Row className=\"rounded bg-white\">\r\n                            <Col xs={12} md={12} >\r\n                                <Form.Group className=\"mb-3\" name=\"lineno\" border=\"primary\" >\r\n                                    <Form.Label>{t('lineno')}</Form.Label>\r\n                                    <Form.Control type=\"number\" placeholder={t('lineno')} required value={inputlineno} onChange={(e) => setInputLineno(e.target.value)} />\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"rounded bg-white\">\r\n                            <div className=\"col-md-12 text-center \">\r\n                                <Button variant=\"primary\" type=\"button\" className=\"text-center\" onClick={updateId ? updateLine : handleSubmit}>\r\n                                    {t('savebutton')}\r\n                                </Button>{' '}\r\n                                <Button variant=\"primary\"\r\n                                    type=\"button\" className=\"text-center\" onClick={clearFields}>{t('newbutton')}\r\n                                </Button>\r\n                            </div>\r\n                            {isLoading ? <PlaceHolder /> : renderLineList}\r\n                            {errorMessage && <div className=\"error\">{errorMessage}</div>}\r\n\r\n                        </Row>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\nexport default AddLine;"],"names":["_ref","linenames","updateMode","_useState","useState","_useState2","_slicedToArray","currentPage","setCurrentPage","_useTranslation","useTranslation","t","lastIndex","i18n","firstIndex","records","slice","nPage","Math","ceil","Object","keys","length","numbers","_toConsumableArray","Array","serialno","_jsx","Fragment","children","_jsxs","style","margin","Table","striped","bordered","hover","size","map","linename","lineno","BiEditAlt","className","onClick","_id","Pagination","Prev","href","n","i","Item","Next","input","setInput","_useState3","_useState4","inputlineno","setInputLineno","_useState5","_useState6","setLinenames","_useState7","_useState8","updateUI","setUpdateUI","_useState9","_useState10","updateId","setUpdateId","_useState11","_useState12","isLoading","setIsLoading","_useState13","_useState14","errorMessage","setErrorMessage","_useState15","_useState16","validated","setValidated","useEffect","axios","get","concat","baseURL","then","res","data","console","log","catch","error","document","addEventListener","event","key","target","nodeName","form","index","prototype","indexOf","call","elements","focus","preventDefault","addLine","post","Number","prevState","alert","renderLineList","ListLine","id","text","Container","Row","Col","xs","lg","Form","md","Group","name","border","Label","Control","type","placeholder","required","value","onChange","e","autoFocus","Button","variant","put","currentTarget","checkValidity","PlaceHolder"],"sourceRoot":""}