{"version":3,"file":"static/js/336.759b4604.chunk.js","mappings":"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","sources":["components/ListCity.js","AddCityName.js"],"sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Table, Pagination } from \"react-bootstrap\";\nimport { BiEditAlt } from \"react-icons/bi\"\nimport { BsTrash } from \"react-icons/bs\"\nimport axios from 'axios'\nimport { baseURL } from \"../utils/constant\";\nimport { useTranslation } from \"react-i18next\";\nconst ListCity = ({ citynames, setUpdateUI, updateMode }) => {\n  const { t, i18n } = useTranslation();\n  const [currentPage, setCurrentPage] = useState(1);\n  const recordsPerPage = 5;\n  const lastIndex = currentPage * recordsPerPage;\n  const firstIndex = lastIndex - recordsPerPage;\n  const records = citynames.slice(firstIndex, lastIndex);\n  const nPage = Math.ceil(Object.keys(citynames).length / recordsPerPage);\n  const numbers = [...Array(nPage + 1).keys()].slice(1);\n  var serialno = 0;\n\n  serialno = (currentPage - 1) * recordsPerPage;\n  const removeCity = (id) => {\n    axios.delete(`${baseURL}/delete/${id}`).then((res) => {\n      setUpdateUI((preveState) => !preveState)\n    })\n  }\n  function prevPage() {\n    if (currentPage !== firstIndex) {\n      setCurrentPage(currentPage - 1)\n    }\n\n  }\n  function nextPage() {\n    if (currentPage !== lastIndex) {\n      serialno = lastIndex;\n      setCurrentPage(currentPage + 1);\n    }\n\n  }\n  function changeCPage(id) {\n    setCurrentPage(id)\n  }\n  return (\n    <Fragment>\n      <div style={{ margin: \"5rem\" }}>\n        <Table striped bordered hover size=\"sm\"  >\n          <thead>\n            <tr>\n              <th>\n                {t('citytableno')}\n              </th>\n              <th>\n                {t('citytablecityname')}\n              </th>\n              <th>\n                {t('citytablecityline')}\n              </th>\n              <th>\n                {t('tableaction')}\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              records && records.length > 0\n                ?\n                (records.map((cityname, i) => {\n                  serialno = serialno + 1;\n                  return (\n                    <tr>\n                      <td>{serialno}</td>\n                      <td>{cityname.cityname}</td>\n                      <td>Line{cityname.citylineno}</td>\n                      <td>\n                        <BiEditAlt className='icons' onClick={() => updateMode(cityname._id, cityname.cityname, cityname.citylineno)} />\n                        <BsTrash className='icons' onClick={() => removeCity(cityname._id)} />\n                      </td>\n                    </tr>\n\n                  )\n                })\n                )\n                :\n                t('tabledata')\n            }\n          </tbody>\n        </Table>\n        <nav>\n\n          <Pagination>\n            <Pagination.Prev >\n              <a href=\"#\" className='page-link' onClick={prevPage}>{t('pageprev')}</a>\n            </Pagination.Prev>\n            {\n              numbers.map((n, i) => (\n                <Pagination.Item>\n                  <a href=\"#\" className='page-link'\n                    onClick={() => changeCPage(n)}>{n}</a>\n                </Pagination.Item>\n              ))\n            }\n            <Pagination.Next>\n              <a href=\"#\" className='page-link' onClick={nextPage}>{t('pagenext')}</a>\n            </Pagination.Next>\n          </Pagination>\n        </nav>\n\n      </div>\n    </Fragment>\n  )\n\n}\nexport default ListCity;\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Container, Form, Row, Col } from 'react-bootstrap';\nimport axios from \"axios\";\nimport { baseURL } from \"./utils/constant\";\nimport ListCity from \"./components/ListCity\";\nimport PlaceHolder from \"./components/spinner/placeholder\";\nimport { useTranslation } from \"react-i18next\";\n//var maxCitycode=0;\nfunction AddCityName() {\n\n    const [inputCity, setInputCity] = useState(\"\");\n    const [lineNo, setLineNo] = useState(\"\");\n    const [cityNames, setCityNames] = useState([]);\n    const [lineNames, setLineNames] = useState([]);\n    const [updateUI, setUpdateUI] = useState(false);\n    const [updateId, setUpdateId] = useState(null);\n    const [validated, setValidated] = useState(false);\n    const { t, i18n } = useTranslation();\n    const [isLoading, setIsLoading] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    useEffect(() => {\n        setIsLoading(true);\n        axios.get(`${baseURL}/citycreate/get`).then((res) => {\n            setCityNames(res.data);\n            setIsLoading(false);\n        }).catch(error => {\n            console.log(\"error=\", error);\n            setErrorMessage(\"Unable to fetch cityname list\");\n            setIsLoading(false);\n        })\n    }, [updateUI]);\n    useEffect(() => {\n        setIsLoading(true);\n        axios.get(`${baseURL}/linemancreate/get/lines`).then((res) => {\n            setLineNames(res.data);\n            setIsLoading(false);\n        }).catch(error => {\n            console.log(\"error=\", error);\n            setErrorMessage(\"Unable to fetch lines list\");\n            setIsLoading(false);\n        })\n    }, [])\n\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n        }\n        setValidated(true);\n\n        if (inputCity !== \"\" && lineNo !== \"\") {\n            addCityName();\n        }\n\n    };\n    const addCityName = () => {\n        setIsLoading(true);\n        axios.post(`${baseURL}/citycreate/save`, { cityname: inputCity, citylineno: lineNo })\n            .then((res) => {\n                setIsLoading(false);\n                setInputCity(\"\");\n                setLineNo(\"\");\n                setUpdateUI((prevState) => !prevState);\n            }).catch(error => {\n                console.log(\"error=\", error);\n                setErrorMessage(\"Unable to Add City to the list\");\n                setIsLoading(false);\n            })\n        alert(\"City Saved Successfully\");\n    }\n    const clearFields = () => {\n        setInputCity(\"\");\n        setLineNo(\"\");\n        setUpdateId(null);\n    }\n\n    const updateMode = (id, text, lineno) => {\n        //console.log(mobilenum);\n        setInputCity(text);\n        setLineNo(lineno)\n        setUpdateId(id);\n\n    }\n\n    const updateCity = () => {\n        setIsLoading(true);\n        axios.put(`${baseURL}/citycreate/update/${updateId}`, { cityname: inputCity, citylineno: lineNo }).then((res) => {\n            setIsLoading(false);\n            setUpdateUI((prevState) => !prevState)\n            setInputCity(\"\");\n            setLineNo(\"\");\n            setUpdateId(null);\n        }).catch(error => {\n            console.log(\"error=\", error);\n            setErrorMessage(\"Unable to update city list\");\n            setIsLoading(false);\n        })\n    }\n    const renderCityNameList = (\n        <ul>\n            <ListCity citynames={cityNames} setUpdateUI={setUpdateUI} updateMode={updateMode} />\n        </ul>\n    );\n\n    return (\n        <Container>\n            <h2 className=\"text-center\">{t('cityheadername')}</h2>\n            <Row className=\"justify-content-md-center mt-5 \">\n                <Col xs={6} lg={6} className=\"rounded bg-white\">\n                    <Form validated={validated}>\n                        <Form.Group className=\"mb-3\" name=\"cityname\" border=\"primary\" >\n                            <Form.Label>{t('citynamelabel')}</Form.Label>\n                            <Form.Control type=\"text\" placeholder={t('citynameplaceholder')} required value={inputCity} onChange={(e) => setInputCity(e.target.value)} />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" name=\"linenumber\" border=\"primary\" >\n                            <Form.Label>{t('citylinelabel')}</Form.Label>\n                            <Form.Select aria-label=\"Default select example\" value={lineNo} onChange={(e) => setLineNo(e.target.value)} required>\n                                <option key={lineNo} value={\"\"} >{t('citylineplaceholder')}</option>\n\n                                {\n                                    lineNames.map((lines) => (\n                                        <option key={lines.lineno} value={lines.lineno}\n                                            selected={lines.lineno} >{lines.linename}</option>\n                                    ))}\n\n                            </Form.Select>\n                        </Form.Group>\n                        <div className=\"col-md-12 text-center \" >\n                            <Button variant=\"primary\" type=\"button\" className=\"text-center\" onClick={updateId ? updateCity : handleSubmit}>\n                                {t('citysavebuttonlabel')}\n                            </Button>{' '}\n                            <Button variant=\"primary\"\n                                type=\"button\" className=\"text-center\" onClick={clearFields}>{t('citynewbttonlabel')}</Button>\n                        </div>\n                        {isLoading ? <PlaceHolder /> : renderCityNameList}\n                        {errorMessage && <div className=\"error\">{errorMessage}</div>}\n\n\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\nexport default AddCityName;"],"names":["_ref","citynames","setUpdateUI","updateMode","_useTranslation","useTranslation","t","_useState","i18n","useState","_useState2","_slicedToArray","currentPage","setCurrentPage","lastIndex","firstIndex","records","slice","nPage","Math","ceil","Object","keys","length","numbers","_toConsumableArray","Array","serialno","_jsx","Fragment","children","_jsxs","style","margin","Table","striped","bordered","hover","size","map","cityname","i","citylineno","BiEditAlt","className","onClick","_id","BsTrash","id","axios","delete","concat","baseURL","then","res","preveState","Pagination","Prev","href","n","Item","Next","inputCity","setInputCity","_useState3","_useState4","lineNo","setLineNo","_useState5","_useState6","cityNames","setCityNames","_useState7","_useState8","lineNames","setLineNames","_useState9","_useState10","updateUI","_useState11","_useState12","updateId","setUpdateId","_useState13","_useState14","validated","setValidated","_useState15","_useState16","isLoading","setIsLoading","_useState17","_useState18","errorMessage","setErrorMessage","useEffect","get","data","catch","error","console","log","addCityName","post","prevState","alert","renderCityNameList","ListCity","text","lineno","Container","Row","Col","xs","lg","Form","Group","name","border","Label","Control","type","placeholder","required","value","onChange","e","target","Select","lines","selected","linename","Button","variant","put","event","currentTarget","checkValidity","preventDefault","PlaceHolder"],"sourceRoot":""}