{"version":3,"file":"static/js/820.3a0f04f2.chunk.js","mappings":"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","sources":["components/ListLineChecking.js","Reports/LinecheckingReport.js"],"sourcesContent":["import React, { Fragment,useState } from 'react'\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {Table,Pagination } from \"react-bootstrap\";\nimport {BiEditAlt} from \"react-icons/bi\"\nimport {BsTrash} from \"react-icons/bs\"\nimport axios from 'axios'\nimport {baseURL} from \"../utils/constant\";\nimport { useTranslation } from \"react-i18next\";\nimport {dateFormatdd} from \"../FunctionsGlobal/StartDateFn\"\n\n\n  \nconst ListLineChecking=({pendingLoans})=>{\n  const { t, i18n } = useTranslation();\nconst[currentPage,setCurrentPage]=useState(1);\nconst recordsPerPage=20;\nconst lastIndex=currentPage*recordsPerPage;\nconst firstIndex=lastIndex-recordsPerPage;\nconst records=pendingLoans.slice(firstIndex,lastIndex);\nconst nPage=Math.ceil(Object.keys(pendingLoans).length/recordsPerPage);\nconst numbers=[...Array(nPage+1).keys()].slice(1);\nvar serialno=0;\nserialno=(currentPage-1) * recordsPerPage;\n  \n  function prevPage(){\n    if(currentPage!==firstIndex)\n    {\n      setCurrentPage(currentPage-1)\n    }\n    \n  }\n  function nextPage(){\n    if(currentPage!==lastIndex){\n      setCurrentPage(currentPage+1);\n    }\n\n  }\n  function changeCPage(id){\n    setCurrentPage(id)\n  }\n  return (\n    <Fragment>\n      <div className='col-md-6'>\n        <h2>Company Name</h2>\n      </div>\n        <div className='col-md-6'><h3>Line Checking</h3></div>\n      <div className='col-md-3'>Ventrilingapuram</div>\n      <div className='col-md-3'>Murugan</div>\n      <div className='col-md-2'>Line 5</div>\n      <div className='col-md-2'>BookNo:1221</div>\n      <div className='col-md-2'>12/03/2023</div>\n      <div >\n        <Table striped bordered hover   >\n          <thead>\n            <tr>\n            <th>\n                {t('no')}\n            </th>\n            <th>\n            {t('startdate')}\n            </th>\n                <th>\n                    {t('loanno')}\n                </th>\n              <th>\n                {t('customer')}\n              </th>\n              <th colSpan={2}>\n                {t('fathername')}\n              </th>\n              <th>\n                {t('address')}\n              </th>\n              <th>\n                {t('phoneno')}\n              </th>\n              <th>\n                {t('enddate')}\n              </th>\n              <th>\n                {t('loanamount')}\n              </th>\n              <th>\n                {t('paidamount')}\n              </th>\n              <th>\n                {t('pending')}\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              records && records.length>0\n              ?\n              (records.map((customer,i)=>{\n                serialno=serialno+1;\n                return(\n                  <tr>\n                    <td>{serialno}</td>\n                    <td>{dateFormatdd(customer['_id'].startdate)}</td>\n                    <td>{customer.loannumber}</td>\n                    <td>{customer['_id'].customer}</td>\n                    <td>{customer.relationtype==0 ? \"F\" : \"H\"}</td>\n                    <td >{customer['_id'].fathername}</td>\n                    <td>{customer['_id'].address}</td>\n                    <td>{customer['_id'].mobileno}</td>\n                    <td>{dateFormatdd(customer['_id'].finisheddate)}</td>\n                    <td>{customer.totalamount}</td>\n                    <td>{customer.collected}</td>\n                    <td>{customer.pending}</td>\n                  </tr>\n                  \n                )\n              })\n              )\n              :\n              t('tabledata')\n            }\n          </tbody>\n        </Table>\n        <nav>\n        \n          <Pagination>\n            <Pagination.Prev >\n            <a href=\"#\" className='page-link' onClick={prevPage}>{t('pageprev')}</a>\n            </Pagination.Prev>\n            {\n            numbers.map((n,i)=>(\n              <Pagination.Item>\n                <a href=\"#\" className='page-link'\n            onClick={()=>changeCPage(n)}>{n}</a>\n              </Pagination.Item>\n            ))\n          }\n            <Pagination.Next>\n            <a href=\"#\" className='page-link' onClick={nextPage}>{t('pagenext')}</a>\n            </Pagination.Next>\n          </Pagination>\n        </nav>\n\n      </div>\n    </Fragment>\n  )\n}\nexport default ListLineChecking\n","import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Button, Container, Form, Row, Col } from 'react-bootstrap';\nimport { baseURL } from \"../utils/constant\";\nimport { useTranslation } from \"react-i18next\";\n//import PlaceHolder from \"./components/spinner/placeholder\";\nimport { startOfWeek } from '../FunctionsGlobal/StartDateFn';\nimport ListLineChecking from \"../components/ListLineChecking\";\nimport ReactToPrint from 'react-to-print';\nimport { BiEditAlt, BiPrinter } from \"react-icons/bi\"\n\nfunction LinecheckingReport() {\n    const [cityNames, setCityNames] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [checkingDetails, setCheckingDetails] = useState([]);\n    const { t, i18n } = useTranslation();\n    const [startDate, setStartDate] = useState(startOfWeek());\n    const [lineNo, setLineNo] = useState(\"\");\n    const [city, setCity] = useState(\"\");\n    useEffect(() => {\n        setIsLoading(true);\n        axios.get(`${baseURL}/citycreate/get`).then((res) => {\n            setCityNames(res.data);\n            setIsLoading(false);\n        }).catch(error => {\n            console.log(\"error=\", error);\n            setErrorMessage(\"Unable to fetch lines list\");\n            setIsLoading(false);\n        })\n    }, [])\n    const processList = () => {\n        setIsLoading(true);\n        return (\n            axios.get(`${baseURL}/loan/checkingdetails`, { params: { city_id: city.toString() } }).then((res) => {\n                setCheckingDetails(res.data)\n                console.log(res.data)\n                setIsLoading(false);\n            })\n                .catch(error => {\n                    console.log(\"error=\", error);\n                    setErrorMessage(\"Unable to fetch lines list\");\n                    setIsLoading(false);\n                })\n        )\n    }\n    const componentRef = useRef();\n    const handlePrint = () => {\n        window.print()\n    }\n    return (\n        <Container>\n            <Row>\n                <Form>\n                    <Row >\n                        <Col xs={12} md={6} className=\"rounder bg-white\">\n                            <Form.Group className=\"mb-3\" name=\"linenumber\" border=\"primary\" >\n                                <Form.Label>{t('citylinelabel')}</Form.Label>\n                                <Form.Select aria-label=\"Default select example\" value={city} onChange={(e) => setCity(e.target.value)} required>\n                                    <option key={\"\"} value={\"\"} >{t('citylineplaceholder')}</option>\n\n                                    {\n                                        cityNames.map((cities) => (\n                                            <option key={cities._id} value={cities._id}\n                                                selected={cities._id} >{cities.cityname}</option>\n                                        ))}\n\n                                </Form.Select>\n                            </Form.Group>\n                        </Col>\n                        <Col md={6} className=\"rounder bg-white\">\n                            <Form.Group>\n                                <Form.Label>{t('date')}</Form.Label>\n                                <Form.Control type=\"date\"  placeholder=\"loan start date\" />\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className=\"rounded bg-white text-center\">\n                        <div className=\"col-md-6 mb-4 \" >\n                            <Button variant=\"primary\" size=\"lg\" type=\"button\" className=\"text-center\" onClick={processList}>\n                                {t('processbuttonlabel')}\n                            </Button>{' '}\n                        </div>\n                        <div className=\"col-md-6 mb-4 \">\n                            <ReactToPrint trigger={() => (\n                                <Button variant=\"primary\" size=\"lg\" type=\"button\" className=\"text-center\" onClick={() => handlePrint}>\n                                    {t('printbutton')}\n                                </Button>\n\n                            )}\n                                content={() => componentRef.current} />\n                        </div>\n                    </Row>\n\n                    <Row ref={componentRef}>\n                        <ListLineChecking pendingLoans={checkingDetails} />\n                    </Row>\n\n                </Form>\n            </Row>\n        </Container>\n    )\n}\nexport default LinecheckingReport;"],"names":["_ref","pendingLoans","_useTranslation","useTranslation","t","_useState","i18n","useState","_useState2","_slicedToArray","currentPage","setCurrentPage","lastIndex","firstIndex","records","slice","nPage","Math","ceil","Object","keys","length","numbers","_toConsumableArray","Array","serialno","_jsxs","Fragment","children","_jsx","className","Table","striped","bordered","hover","colSpan","map","customer","i","dateFormatdd","startdate","loannumber","relationtype","fathername","address","mobileno","finisheddate","totalamount","collected","pending","Pagination","Prev","href","onClick","n","Item","Next","cityNames","setCityNames","_useState3","_useState4","setIsLoading","_useState5","_useState6","setErrorMessage","_useState7","_useState8","checkingDetails","setCheckingDetails","_useState9","startOfWeek","_useState10","_useState11","_useState12","_useState13","_useState14","city","setCity","useEffect","axios","get","concat","baseURL","then","res","data","catch","error","console","log","componentRef","useRef","handlePrint","window","print","Container","Row","Form","Col","xs","md","Group","name","border","Label","Select","value","onChange","e","target","required","cities","_id","selected","cityname","Control","type","placeholder","Button","variant","size","params","city_id","toString","ReactToPrint","trigger","content","current","ref","ListLineChecking"],"sourceRoot":""}