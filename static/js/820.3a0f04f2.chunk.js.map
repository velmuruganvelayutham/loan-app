{"version":3,"file":"static/js/820.3a0f04f2.chunk.js","mappings":"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","sources":["components/ListLineChecking.js","Reports/LinecheckingReport.js"],"sourcesContent":["import React, { Fragment,useState } from 'react'\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {Table,Pagination } from \"react-bootstrap\";\r\nimport {BiEditAlt} from \"react-icons/bi\"\r\nimport {BsTrash} from \"react-icons/bs\"\r\nimport axios from 'axios'\r\nimport {baseURL} from \"../utils/constant\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport {dateFormatdd} from \"../FunctionsGlobal/StartDateFn\"\r\n\r\n\r\n  \r\nconst ListLineChecking=({pendingLoans})=>{\r\n  const { t, i18n } = useTranslation();\r\nconst[currentPage,setCurrentPage]=useState(1);\r\nconst recordsPerPage=20;\r\nconst lastIndex=currentPage*recordsPerPage;\r\nconst firstIndex=lastIndex-recordsPerPage;\r\nconst records=pendingLoans.slice(firstIndex,lastIndex);\r\nconst nPage=Math.ceil(Object.keys(pendingLoans).length/recordsPerPage);\r\nconst numbers=[...Array(nPage+1).keys()].slice(1);\r\nvar serialno=0;\r\nserialno=(currentPage-1) * recordsPerPage;\r\n  \r\n  function prevPage(){\r\n    if(currentPage!==firstIndex)\r\n    {\r\n      setCurrentPage(currentPage-1)\r\n    }\r\n    \r\n  }\r\n  function nextPage(){\r\n    if(currentPage!==lastIndex){\r\n      setCurrentPage(currentPage+1);\r\n    }\r\n\r\n  }\r\n  function changeCPage(id){\r\n    setCurrentPage(id)\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <div className='col-md-6'>\r\n        <h2>Company Name</h2>\r\n      </div>\r\n        <div className='col-md-6'><h3>Line Checking</h3></div>\r\n      <div className='col-md-3'>Ventrilingapuram</div>\r\n      <div className='col-md-3'>Murugan</div>\r\n      <div className='col-md-2'>Line 5</div>\r\n      <div className='col-md-2'>BookNo:1221</div>\r\n      <div className='col-md-2'>12/03/2023</div>\r\n      <div >\r\n        <Table striped bordered hover   >\r\n          <thead>\r\n            <tr>\r\n            <th>\r\n                {t('no')}\r\n            </th>\r\n            <th>\r\n            {t('startdate')}\r\n            </th>\r\n                <th>\r\n                    {t('loanno')}\r\n                </th>\r\n              <th>\r\n                {t('customer')}\r\n              </th>\r\n              <th colSpan={2}>\r\n                {t('fathername')}\r\n              </th>\r\n              <th>\r\n                {t('address')}\r\n              </th>\r\n              <th>\r\n                {t('phoneno')}\r\n              </th>\r\n              <th>\r\n                {t('enddate')}\r\n              </th>\r\n              <th>\r\n                {t('loanamount')}\r\n              </th>\r\n              <th>\r\n                {t('paidamount')}\r\n              </th>\r\n              <th>\r\n                {t('pending')}\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n              records && records.length>0\r\n              ?\r\n              (records.map((customer,i)=>{\r\n                serialno=serialno+1;\r\n                return(\r\n                  <tr>\r\n                    <td>{serialno}</td>\r\n                    <td>{dateFormatdd(customer['_id'].startdate)}</td>\r\n                    <td>{customer.loannumber}</td>\r\n                    <td>{customer['_id'].customer}</td>\r\n                    <td>{customer.relationtype==0 ? \"F\" : \"H\"}</td>\r\n                    <td >{customer['_id'].fathername}</td>\r\n                    <td>{customer['_id'].address}</td>\r\n                    <td>{customer['_id'].mobileno}</td>\r\n                    <td>{dateFormatdd(customer['_id'].finisheddate)}</td>\r\n                    <td>{customer.totalamount}</td>\r\n                    <td>{customer.collected}</td>\r\n                    <td>{customer.pending}</td>\r\n                  </tr>\r\n                  \r\n                )\r\n              })\r\n              )\r\n              :\r\n              t('tabledata')\r\n            }\r\n          </tbody>\r\n        </Table>\r\n        <nav>\r\n        \r\n          <Pagination>\r\n            <Pagination.Prev >\r\n            <a href=\"#\" className='page-link' onClick={prevPage}>{t('pageprev')}</a>\r\n            </Pagination.Prev>\r\n            {\r\n            numbers.map((n,i)=>(\r\n              <Pagination.Item>\r\n                <a href=\"#\" className='page-link'\r\n            onClick={()=>changeCPage(n)}>{n}</a>\r\n              </Pagination.Item>\r\n            ))\r\n          }\r\n            <Pagination.Next>\r\n            <a href=\"#\" className='page-link' onClick={nextPage}>{t('pagenext')}</a>\r\n            </Pagination.Next>\r\n          </Pagination>\r\n        </nav>\r\n\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default ListLineChecking\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Button, Container, Form, Row, Col } from 'react-bootstrap';\r\nimport { baseURL } from \"../utils/constant\";\r\nimport { useTranslation } from \"react-i18next\";\r\n//import PlaceHolder from \"./components/spinner/placeholder\";\r\nimport { startOfWeek } from '../FunctionsGlobal/StartDateFn';\r\nimport ListLineChecking from \"../components/ListLineChecking\";\r\nimport ReactToPrint from 'react-to-print';\r\nimport { BiEditAlt, BiPrinter } from \"react-icons/bi\"\r\n\r\nfunction LinecheckingReport() {\r\n    const [cityNames, setCityNames] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [checkingDetails, setCheckingDetails] = useState([]);\r\n    const { t, i18n } = useTranslation();\r\n    const [startDate, setStartDate] = useState(startOfWeek());\r\n    const [lineNo, setLineNo] = useState(\"\");\r\n    const [city, setCity] = useState(\"\");\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        axios.get(`${baseURL}/citycreate/get`).then((res) => {\r\n            setCityNames(res.data);\r\n            setIsLoading(false);\r\n        }).catch(error => {\r\n            console.log(\"error=\", error);\r\n            setErrorMessage(\"Unable to fetch lines list\");\r\n            setIsLoading(false);\r\n        })\r\n    }, [])\r\n    const processList = () => {\r\n        setIsLoading(true);\r\n        return (\r\n            axios.get(`${baseURL}/loan/checkingdetails`, { params: { city_id: city.toString() } }).then((res) => {\r\n                setCheckingDetails(res.data)\r\n                console.log(res.data)\r\n                setIsLoading(false);\r\n            })\r\n                .catch(error => {\r\n                    console.log(\"error=\", error);\r\n                    setErrorMessage(\"Unable to fetch lines list\");\r\n                    setIsLoading(false);\r\n                })\r\n        )\r\n    }\r\n    const componentRef = useRef();\r\n    const handlePrint = () => {\r\n        window.print()\r\n    }\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Form>\r\n                    <Row >\r\n                        <Col xs={12} md={6} className=\"rounder bg-white\">\r\n                            <Form.Group className=\"mb-3\" name=\"linenumber\" border=\"primary\" >\r\n                                <Form.Label>{t('citylinelabel')}</Form.Label>\r\n                                <Form.Select aria-label=\"Default select example\" value={city} onChange={(e) => setCity(e.target.value)} required>\r\n                                    <option key={\"\"} value={\"\"} >{t('citylineplaceholder')}</option>\r\n\r\n                                    {\r\n                                        cityNames.map((cities) => (\r\n                                            <option key={cities._id} value={cities._id}\r\n                                                selected={cities._id} >{cities.cityname}</option>\r\n                                        ))}\r\n\r\n                                </Form.Select>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={6} className=\"rounder bg-white\">\r\n                            <Form.Group>\r\n                                <Form.Label>{t('date')}</Form.Label>\r\n                                <Form.Control type=\"date\"  placeholder=\"loan start date\" />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"rounded bg-white text-center\">\r\n                        <div className=\"col-md-6 mb-4 \" >\r\n                            <Button variant=\"primary\" size=\"lg\" type=\"button\" className=\"text-center\" onClick={processList}>\r\n                                {t('processbuttonlabel')}\r\n                            </Button>{' '}\r\n                        </div>\r\n                        <div className=\"col-md-6 mb-4 \">\r\n                            <ReactToPrint trigger={() => (\r\n                                <Button variant=\"primary\" size=\"lg\" type=\"button\" className=\"text-center\" onClick={() => handlePrint}>\r\n                                    {t('printbutton')}\r\n                                </Button>\r\n\r\n                            )}\r\n                                content={() => componentRef.current} />\r\n                        </div>\r\n                    </Row>\r\n\r\n                    <Row ref={componentRef}>\r\n                        <ListLineChecking pendingLoans={checkingDetails} />\r\n                    </Row>\r\n\r\n                </Form>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\nexport default LinecheckingReport;"],"names":["_ref","pendingLoans","_useTranslation","useTranslation","t","_useState","i18n","useState","_useState2","_slicedToArray","currentPage","setCurrentPage","lastIndex","firstIndex","records","slice","nPage","Math","ceil","Object","keys","length","numbers","_toConsumableArray","Array","serialno","_jsxs","Fragment","children","_jsx","className","Table","striped","bordered","hover","colSpan","map","customer","i","dateFormatdd","startdate","loannumber","relationtype","fathername","address","mobileno","finisheddate","totalamount","collected","pending","Pagination","Prev","href","onClick","n","Item","Next","cityNames","setCityNames","_useState3","_useState4","setIsLoading","_useState5","_useState6","setErrorMessage","_useState7","_useState8","checkingDetails","setCheckingDetails","_useState9","startOfWeek","_useState10","_useState11","_useState12","_useState13","_useState14","city","setCity","useEffect","axios","get","concat","baseURL","then","res","data","catch","error","console","log","componentRef","useRef","handlePrint","window","print","Container","Row","Form","Col","xs","md","Group","name","border","Label","Select","value","onChange","e","target","required","cities","_id","selected","cityname","Control","type","placeholder","Button","variant","size","params","city_id","toString","ReactToPrint","trigger","content","current","ref","ListLineChecking"],"sourceRoot":""}