{"version":3,"file":"static/js/336.63bda5b8.chunk.js","mappings":"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","sources":["components/ListCity.js","AddCityName.js"],"sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Table, Pagination } from \"react-bootstrap\";\r\nimport { BiEditAlt } from \"react-icons/bi\"\r\nimport { useTranslation } from \"react-i18next\";\r\nconst ListCity = ({ citynames, updateMode }) => {\r\n  const { t, i18n } = useTranslation();\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const recordsPerPage = 5;\r\n  const lastIndex = currentPage * recordsPerPage;\r\n  const firstIndex = lastIndex - recordsPerPage;\r\n  const records = citynames.slice(firstIndex, lastIndex);\r\n  const nPage = Math.ceil(Object.keys(citynames).length / recordsPerPage);\r\n  const numbers = [...Array(nPage + 1).keys()].slice(1);\r\n  var serialno = 0;\r\n\r\n  serialno = (currentPage - 1) * recordsPerPage;\r\n  /*const removeCity = (id) => {\r\n    axios.delete(`${baseURL}/delete/${id}`).then((res) => {\r\n      setUpdateUI((preveState) => !preveState)\r\n    })\r\n  }*/\r\n  function prevPage() {\r\n    if (currentPage !== firstIndex) {\r\n      setCurrentPage(currentPage - 1)\r\n    }\r\n\r\n  }\r\n  function nextPage() {\r\n    if (currentPage !== lastIndex) {\r\n      serialno = lastIndex;\r\n      setCurrentPage(currentPage + 1);\r\n    }\r\n\r\n  }\r\n  function changeCPage(id) {\r\n    setCurrentPage(id)\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <div style={{ margin: \"5rem\" }}>\r\n        <Table striped bordered hover size=\"sm\"  >\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                {t('no')}\r\n              </th>\r\n              <th>\r\n                {t('city')}\r\n              </th>\r\n              <th>\r\n                {t('line')}\r\n              </th>\r\n              <th>\r\n                {t('tableaction')}\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n              records && records.length > 0\r\n                ?\r\n                (records.map((cityname, i) => {\r\n                  serialno = serialno + 1;\r\n                  return (\r\n                    <tr>\r\n                      <td>{serialno}</td>\r\n                      <td>{cityname.cityname}</td>\r\n                      <td>{cityname.linename}</td>\r\n                      <td>\r\n                        <BiEditAlt className='icons' onClick={() => updateMode(cityname._id, cityname.cityname, cityname.citylineno)} />\r\n                        {/*<BsTrash className='icons' onClick={() => removeCity(cityname._id)} />*/}\r\n                      </td>\r\n                    </tr>\r\n\r\n                  )\r\n                })\r\n                )\r\n                :\r\n                t('tabledata')\r\n            }\r\n          </tbody>\r\n        </Table>\r\n        <nav>\r\n\r\n          <Pagination>\r\n            <Pagination.Prev >\r\n              <a href=\"#\" className='page-link' onClick={prevPage}>{t('pageprev')}</a>\r\n            </Pagination.Prev>\r\n            {\r\n              numbers.map((n, i) => (\r\n                <Pagination.Item>\r\n                  <a href=\"#\" className='page-link'\r\n                    onClick={() => changeCPage(n)}>{n}</a>\r\n                </Pagination.Item>\r\n              ))\r\n            }\r\n            <Pagination.Next>\r\n              <a href=\"#\" className='page-link' onClick={nextPage}>{t('pagenext')}</a>\r\n            </Pagination.Next>\r\n          </Pagination>\r\n        </nav>\r\n\r\n      </div>\r\n    </Fragment>\r\n  )\r\n\r\n}\r\nexport default ListCity;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Container, Form, Row, Col } from 'react-bootstrap';\r\nimport axios from \"axios\";\r\nimport { baseURL } from \"./utils/constant\";\r\nimport ListCity from \"./components/ListCity\";\r\nimport PlaceHolder from \"./components/spinner/placeholder\";\r\nimport { useTranslation } from \"react-i18next\";\r\n//var maxCitycode=0;\r\nfunction AddCityName() {\r\n\r\n    const [inputCity, setInputCity] = useState(\"\");\r\n    const [lineNo, setLineNo] = useState(\"\");\r\n    const [cityNames, setCityNames] = useState([]);\r\n    const [lineNames, setLineNames] = useState([]);\r\n    const [updateUI, setUpdateUI] = useState(false);\r\n    const [updateId, setUpdateId] = useState(null);\r\n    const [validated, setValidated] = useState(false);\r\n    const { t, i18n } = useTranslation();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        axios.get(`${baseURL}/citycreate/get`).then((res) => {\r\n            setCityNames(res.data);\r\n            setIsLoading(false);\r\n        }).catch(error => {\r\n            console.log(\"error=\", error);\r\n            setErrorMessage(t('errormessagecity'));\r\n            setIsLoading(false);\r\n        })\r\n    }, [updateUI]);\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        axios.get(`${baseURL}/linemancreate/get/lines`).then((res) => {\r\n            setLineNames(res.data);\r\n            setIsLoading(false);\r\n        }).catch(error => {\r\n            console.log(\"error=\", error);\r\n            setErrorMessage(t('errormessageline'));\r\n            setIsLoading(false);\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keydown\", function (event) {\r\n          if (event.key === \"Enter\" && event.target.nodeName === \"INPUT\") {\r\n            var form = event.target.form;\r\n            var index = Array.prototype.indexOf.call(form, event.target);\r\n            form.elements[index + 1].focus();\r\n            event.preventDefault();\r\n          }\r\n        });\r\n      }, []);\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n        }\r\n        setValidated(true);\r\n\r\n        if (inputCity !== \"\" && lineNo !== \"\") {\r\n            addCityName();\r\n        }\r\n\r\n    };\r\n    const addCityName = () => {\r\n        setIsLoading(true);\r\n        axios.post(`${baseURL}/citycreate/save`, { cityname: inputCity, citylineno: lineNo })\r\n            .then((res) => {\r\n                setIsLoading(false);\r\n                setInputCity(\"\");\r\n                setLineNo(\"\");\r\n                setUpdateUI((prevState) => !prevState);\r\n            }).catch(error => {\r\n                console.log(\"error=\", error);\r\n                setErrorMessage(t('errormessagesavecity'));\r\n                setIsLoading(false);\r\n            })\r\n        alert(t('savealertmessage'));\r\n    }\r\n    const clearFields = () => {\r\n        setInputCity(\"\");\r\n        setLineNo(\"\");\r\n        setUpdateId(null);\r\n    }\r\n\r\n    const updateMode = (id, text, lineno) => {\r\n        //console.log(mobilenum);\r\n        setInputCity(text);\r\n        setLineNo(lineno)\r\n        setUpdateId(id);\r\n\r\n    }\r\n\r\n    const updateCity = () => {\r\n        setIsLoading(true);\r\n        axios.put(`${baseURL}/citycreate/update/${updateId}`, { cityname: inputCity, citylineno: lineNo }).then((res) => {\r\n            setIsLoading(false);\r\n            setUpdateUI((prevState) => !prevState)\r\n            setInputCity(\"\");\r\n            setLineNo(\"\");\r\n            setUpdateId(null);\r\n        }).catch(error => {\r\n            console.log(\"error=\", error);\r\n            setErrorMessage(t('errormessagesavecity'));\r\n            setIsLoading(false);\r\n        })\r\n        alert(t('savealertmessage'));\r\n    }\r\n    const renderCityNameList = (\r\n        <ul>\r\n            <ListCity citynames={cityNames}  updateMode={updateMode} />\r\n        </ul>\r\n    );\r\n\r\n    return (\r\n        <Container>\r\n            <h2 className=\"text-center\">{t('cityheadername')}</h2>\r\n            <Row className=\"justify-content-md-center mt-5 \">\r\n                <Col xs={6} lg={6} className=\"rounded bg-white\">\r\n                    <Form validated={validated}>\r\n                        <Form.Group className=\"mb-3\" name=\"cityname\" border=\"primary\" >\r\n                            <Form.Label>{t('city')}</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder={t('cityplaceholderlabel')} required value={inputCity} onChange={(e) => setInputCity(e.target.value)} autoFocus />\r\n                        </Form.Group>\r\n                        <Form.Group className=\"mb-3\" name=\"linenumber\" border=\"primary\" >\r\n                            <Form.Label>{t('line')}</Form.Label>\r\n                            <Form.Select aria-label=\"Default select example\" value={lineNo} onChange={(e) => setLineNo(e.target.value)} required>\r\n                                <option key={lineNo} value={\"\"} >{t('lineplaceholder')}</option>\r\n\r\n                                {\r\n                                    lineNames.map((lines) => (\r\n                                        <option key={lines.lineno} value={lines.lineno}\r\n                                            selected={lines.lineno} >{lines.linename}</option>\r\n                                    ))}\r\n\r\n                            </Form.Select>\r\n                        </Form.Group>\r\n                        <div className=\"col-md-12 text-center \" >\r\n                            <Button variant=\"primary\" type=\"button\" className=\"text-center\" onClick={updateId ? updateCity : handleSubmit}>\r\n                                {t('savebutton')}\r\n                            </Button>{' '}\r\n                            <Button variant=\"primary\"\r\n                                type=\"button\" className=\"text-center\" onClick={clearFields}>{t('newbutton')}</Button>\r\n                        </div>\r\n                        {isLoading ? <PlaceHolder /> : renderCityNameList}\r\n                        {errorMessage && <div className=\"error\">{errorMessage}</div>}\r\n\r\n\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\nexport default AddCityName;"],"names":["_ref","citynames","updateMode","_useTranslation","useTranslation","t","_useState","i18n","useState","_useState2","_slicedToArray","currentPage","setCurrentPage","lastIndex","firstIndex","records","slice","nPage","Math","ceil","Object","keys","length","numbers","_toConsumableArray","Array","serialno","_jsx","Fragment","children","_jsxs","style","margin","Table","striped","bordered","hover","size","map","cityname","i","linename","BiEditAlt","className","onClick","_id","citylineno","Pagination","Prev","href","n","Item","Next","inputCity","setInputCity","_useState3","_useState4","lineNo","setLineNo","_useState5","_useState6","cityNames","setCityNames","_useState7","_useState8","lineNames","setLineNames","_useState9","_useState10","updateUI","setUpdateUI","_useState11","_useState12","updateId","setUpdateId","_useState13","_useState14","validated","setValidated","_useState15","_useState16","isLoading","setIsLoading","_useState17","_useState18","errorMessage","setErrorMessage","useEffect","axios","get","concat","baseURL","then","res","data","catch","error","console","log","document","addEventListener","event","key","target","nodeName","form","index","prototype","indexOf","call","elements","focus","preventDefault","addCityName","post","prevState","alert","renderCityNameList","ListCity","id","text","lineno","Container","Row","Col","xs","lg","Form","Group","name","border","Label","Control","type","placeholder","required","value","onChange","e","autoFocus","Select","lines","selected","Button","variant","put","currentTarget","checkValidity","PlaceHolder"],"sourceRoot":""}