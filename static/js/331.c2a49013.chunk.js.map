{"version":3,"file":"static/js/331.c2a49013.chunk.js","mappings":"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","sources":["components/ListLineMan.js","AddLineMan.js"],"sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Table, Pagination } from \"react-bootstrap\";\r\nimport { BiEditAlt } from \"react-icons/bi\"\r\nimport { useTranslation } from \"react-i18next\";\r\nconst ListLineMan = ({ linemannames, updateMode }) => {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const { t, i18n } = useTranslation();\r\n  const recordsPerPage = 10;\r\n  const lastIndex = currentPage * recordsPerPage;\r\n  const firstIndex = lastIndex - recordsPerPage;\r\n  const records = linemannames.slice(firstIndex, lastIndex);\r\n  const nPage = Math.ceil(Object.keys(linemannames).length / recordsPerPage);\r\n  const numbers = [...Array(nPage + 1).keys()].slice(1);\r\n  var serialno = 0;\r\n\r\n  serialno = (currentPage - 1) * recordsPerPage;\r\n  /*const removeLineMan=(id)=>{\r\n      axios.delete(`${baseURL}/linemancreate/delete/${id}`).then((res)=>{\r\n          setUpdateUI((preveState)=>!preveState)\r\n        })\r\n  }*/\r\n  function prevPage() {\r\n    if (currentPage !== firstIndex) {\r\n      setCurrentPage(currentPage - 1)\r\n    }\r\n\r\n  }\r\n  function nextPage() {\r\n    if (currentPage !== lastIndex) {\r\n      serialno = lastIndex;\r\n      setCurrentPage(currentPage + 1);\r\n    }\r\n\r\n  }\r\n  function changeCPage(id) {\r\n    setCurrentPage(id)\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <div style={{ margin: \"5rem\" }}>\r\n        <Table striped bordered hover size=\"sm\"  >\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                {t('no')}\r\n              </th>\r\n              <th>\r\n                {t('lineman')}\r\n              </th>\r\n              <th>\r\n                {t('phoneno')}\r\n              </th>\r\n              <th>\r\n                {t('tableaction')}\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n              records && records.length > 0\r\n                ?\r\n                (records.map((linemanname) => {\r\n                  serialno = serialno + 1;\r\n                  return (\r\n                    <tr>\r\n                      <td>{serialno}</td>\r\n                      <td>{linemanname.linemanname}</td>\r\n                      <td>{linemanname.mobileno}</td>\r\n                      <td>\r\n                        <BiEditAlt className='icons' onClick={() => updateMode(linemanname._id, linemanname.linemanname, linemanname.mobileno)} />\r\n                        {/*<BsTrash className='icons' onClick={()=>removeLineMan(linemanname._id)} />*/}\r\n                      </td>\r\n                    </tr>\r\n\r\n                  )\r\n                })\r\n                )\r\n                :\r\n                t('tabledata')\r\n            }\r\n          </tbody>\r\n        </Table>\r\n        <nav>\r\n\r\n          <Pagination>\r\n            <Pagination.Prev >\r\n              <a href=\"#\" className='page-link' onClick={prevPage}>{t('pageprev')}</a>\r\n            </Pagination.Prev>\r\n            {\r\n              numbers.map((n, i) => (\r\n                <Pagination.Item>\r\n                  <a href=\"#\" className='page-link'\r\n                    onClick={() => changeCPage(n)}>{n}</a>\r\n                </Pagination.Item>\r\n              ))\r\n            }\r\n            <Pagination.Next>\r\n              <a href=\"#\" className='page-link' onClick={nextPage}>{t('pagenext')}</a>\r\n            </Pagination.Next>\r\n          </Pagination>\r\n        </nav>\r\n\r\n      </div>\r\n    </Fragment>\r\n  )\r\n\r\n}\r\nexport default ListLineMan;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Container, Form, Row, Col } from 'react-bootstrap';\r\nimport ListLineMan from \"./components/ListLineMan\"\r\nimport axios from \"axios\"\r\nimport { baseURL } from \"./utils/constant\";\r\nimport PlaceHolder from \"./components/spinner/placeholder\";\r\nimport { useTranslation } from \"react-i18next\";\r\nfunction AddLineMan() {\r\n  const [input, setInput] = useState(\"\");\r\n  const [inputmobileno, setInputMobileno] = useState(\"\")\r\n  const [lineMans, setLineMans] = useState([]);\r\n  const [updateUI, setUpdateUI] = useState(false);\r\n  const [updateId, setUpdateId] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const { t,i18n } = useTranslation();\r\n  const [validated, setValidated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    axios.get(`${baseURL}/linemancreate/get`).then((res) => {\r\n      setLineMans(res.data)\r\n      setIsLoading(false)\r\n    })\r\n      .catch(error => {\r\n        console.log(\"error=\", error);\r\n        setErrorMessage(t('errormessagelineman'));\r\n        setIsLoading(false);\r\n      })\r\n  }, [updateUI]);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", function (event) {\r\n      if (event.key === \"Enter\" && event.target.nodeName === \"INPUT\") {\r\n        var form = event.target.form;\r\n        var index = Array.prototype.indexOf.call(form, event.target);\r\n        form.elements[index + 1].focus();\r\n        event.preventDefault();\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const handleSubmit = (event) => {\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n        event.preventDefault();\r\n    }\r\n    setValidated(true);\r\n\r\n    if (input !== \"\" && inputmobileno !== \"\") {\r\n      addLineMan();\r\n    }\r\n\r\n};\r\n\r\n  const addLineMan = () => {\r\n    setIsLoading(true);\r\n    \r\n    axios.post(`${baseURL}/linemancreate/save`, { linemanname: input, mobileno: inputmobileno }).then((res) => {\r\n      setIsLoading(false)\r\n      setInput(\"\")\r\n      setInputMobileno(\"\");\r\n      setUpdateUI((prevState) => !prevState)\r\n    })\r\n      .catch(error => {\r\n        setErrorMessage(t('errormessagesavelineman'));\r\n        setIsLoading(false);\r\n        console.log(\"error=\", error);\r\n      })\r\n      alert(t('savealertmessage'));\r\n  }\r\n\r\n  const updateMode = (id, text, mobilenum) => {\r\n    setInput(text);\r\n    setInputMobileno(mobilenum);\r\n    setUpdateId(id);\r\n  }\r\n\r\n  const updateLineMan = () => {\r\n    setIsLoading(true);\r\n    axios.put(`${baseURL}/linemancreate/update/${updateId}`, { linemanname: input, mobileno: inputmobileno }).then((res) => {\r\n      setIsLoading(false)\r\n      setUpdateUI((prevState) => !prevState)\r\n      setInput(\"\");\r\n      setInputMobileno(\"\");\r\n      setUpdateId(null);\r\n    }).catch(error => {\r\n        setErrorMessage(t('errormessagesavelineman'));\r\n        setIsLoading(false);\r\n        console.log(\"error=\", error);\r\n      })\r\n      alert(t('savealertmessage'));\r\n  }\r\n  const clearFields = () => {\r\n    setInput(\"\");\r\n    setInputMobileno(\"\");\r\n    setUpdateId(null);\r\n  }\r\n\r\n  const renderLineManList = (\r\n    <div className=\"text-center\">\r\n      <ListLineMan linemannames={lineMans}  updateMode={updateMode}/>\r\n    </div>);\r\n\r\n  return (\r\n\r\n    <Container >\r\n      <h2 className=\"text-center\">{t('linemanheader')}</h2>\r\n      <Row className=\"justify-content-md-center mt-5 \">\r\n      <Col xs={6} lg={6} className=\"rounded bg-white\">\r\n        <Form validated={validated}>\r\n          <Row className=\"rounded bg-white\">\r\n            <Col xs={12} md={12} >\r\n              <Form.Group className=\"mb-3\" name=\"linemanname\" border=\"primary\" >\r\n                <Form.Label>{t('lineman')}</Form.Label>\r\n                <Form.Control type=\"text\" placeholder={t('linemanplaceholderlabel')} required value={input} onChange={(e) => setInput(e.target.value)} autoFocus />\r\n              </Form.Group>\r\n            </Col>\r\n\r\n          </Row>\r\n          <Row className=\"rounded bg-white\">\r\n            <Col xs={12} md={12} >\r\n              <Form.Group className=\"mb-3\" name=\"mobilenumber\" border=\"primary\" >\r\n                <Form.Label>{t('phoneno')}</Form.Label>\r\n                <Form.Control type=\"number\" placeholder={t('phonenoplaceholder')} required value={inputmobileno} onChange={(e) => setInputMobileno(e.target.value)} />\r\n              </Form.Group>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"rounded bg-white\">\r\n            <div className=\"col-md-12 text-center \">\r\n              <Button variant=\"primary\"  type=\"button\" className=\"text-center\" onClick={updateId ? updateLineMan : handleSubmit}>\r\n                {t('savebutton')}\r\n              </Button>{' '}\r\n              <Button variant=\"primary\"\r\n                type=\"button\" className=\"text-center\" onClick={clearFields}>{t('newbutton')}\r\n              </Button>\r\n            </div>\r\n            {isLoading ? <PlaceHolder /> : renderLineManList}\r\n            {errorMessage && <div className=\"error\">{errorMessage}</div>}\r\n\r\n          </Row>\r\n        </Form>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n\r\n  )\r\n}\r\nexport default AddLineMan;"],"names":["_ref","linemannames","updateMode","_useState","useState","_useState2","_slicedToArray","currentPage","setCurrentPage","_useTranslation","useTranslation","t","lastIndex","i18n","firstIndex","records","slice","nPage","Math","ceil","Object","keys","length","numbers","_toConsumableArray","Array","serialno","_jsx","Fragment","children","_jsxs","style","margin","Table","striped","bordered","hover","size","map","linemanname","mobileno","BiEditAlt","className","onClick","_id","Pagination","Prev","href","n","i","Item","Next","input","setInput","_useState3","_useState4","inputmobileno","setInputMobileno","_useState5","_useState6","lineMans","setLineMans","_useState7","_useState8","updateUI","setUpdateUI","_useState9","_useState10","updateId","setUpdateId","_useState11","_useState12","isLoading","setIsLoading","_useState13","_useState14","errorMessage","setErrorMessage","_useState15","_useState16","validated","setValidated","useEffect","axios","get","concat","baseURL","then","res","data","catch","error","console","log","document","addEventListener","event","key","target","nodeName","form","index","prototype","indexOf","call","elements","focus","preventDefault","addLineMan","post","prevState","alert","renderLineManList","ListLineMan","id","text","mobilenum","Container","Row","Col","xs","lg","Form","md","Group","name","border","Label","Control","type","placeholder","required","value","onChange","e","autoFocus","Button","variant","put","currentTarget","checkValidity","PlaceHolder"],"sourceRoot":""}